#!/usr/bin/perl -w
use strict;
use Getopt::Long;
use File::Basename;
use Cwd qw(abs_path);
use FindBin qw($Bin $Script);

=head1 Description

=head1 Version

        Version: 0.1    Date: 2022-12-01   Author: xianghaitao@genomics.cn

=head1 Options

    -inAnno            <s> : path to multianno.txt file generated by ANNOVAR software [table_annovar.pl] (mandatory, compatible with ".gz" files)
    -inGenomeFA        <s> : path to reference genome sequece file in fasta format (mandatory, compatible with gz compressed file)
    -inGenomeGTF       <s> : path to reference genome annotation file in gtf format (mandatory, compatible with gz compressed file)
    -mutRegionTag      <s> : mutant region tag use to generate mutate peptide [optional, default "all", 
                             assign tags presented in the "Func.refGene" column of "-inAnno" file, multiple region tag can be joined by comma]
    -minPEPlen         <n> : minimum length of mutant peptide [optional, default 8 aa]
    -maxPEPlen         <n> : minimum length of mutant peptide [optional, default 15 aa]
    -outdir            <s> : path to output directory [default current directory]
    -prefix            <s> : prefix of output file [default "sampleSpecMut"]
    -help                  : show this help information and exit.

=cut

my ($inAnno, $inGenomeFA, $inGenomeGTF, $mutRegionTag, $minPEPlen, $maxPEPlen, $outdir, $prefix, $help);
GetOptions (
    "inAnno:s" => \$inAnno,
    "inGenomeFA:s" => \$inGenomeFA,
    "inGenomeGTF:s" => \$inGenomeGTF,
    "mutRegionTag:s" => \$mutRegionTag,
    "minPEPlen:n" => \$minPEPlen,
    "maxPEPlen:n" => \$maxPEPlen,
    "outdir:s" => \$outdir,
    "prefix:s" => \$prefix,
    "help" => \$help
);

die `pod2text $0` if (!defined $inAnno || !defined $inGenomeFA || !defined $inGenomeGTF || $help);

$outdir ||= `pwd`; chomp $outdir;
$outdir = abs_path($outdir);
$prefix ||= "sampleSpecMut";
$mutRegionTag ||= "all";
$minPEPlen ||= 8;
$maxPEPlen ||= 15;

my %regionTag;
my @tmp = split /\,/, $mutRegionTag;
for (my $i=0; $i<@tmp; $i++) {
    $regionTag{$tmp[$i]} = 1;
}

my %CODE = (
    'GCA' => 'A', 'GCC' => 'A', 'GCG' => 'A', 'GCT' => 'A',                               # Alanine
    'TGC' => 'C', 'TGT' => 'C',                                                           # Cysteine
    'GAC' => 'D', 'GAT' => 'D',                                                           # Aspartic Acid
    'GAA' => 'E', 'GAG' => 'E',                                                           # Glutamic Acid
    'TTC' => 'F', 'TTT' => 'F',                                                           # Phenylalanine
    'GGA' => 'G', 'GGC' => 'G', 'GGG' => 'G', 'GGT' => 'G',                               # Glycine
    'CAC' => 'H', 'CAT' => 'H',                                                           # Histidine
    'ATA' => 'I', 'ATC' => 'I', 'ATT' => 'I',                                             # Isoleucine
    'AAA' => 'K', 'AAG' => 'K',                                                           # Lysine
    'CTA' => 'L', 'CTC' => 'L', 'CTG' => 'L', 'CTT' => 'L', 'TTA' => 'L', 'TTG' => 'L',   # Leucine
    'ATG' => 'M',                                                                         # Methionine
    'AAC' => 'N', 'AAT' => 'N',                                                           # Asparagine
    'CCA' => 'P', 'CCC' => 'P', 'CCG' => 'P', 'CCT' => 'P',                               # Proline
    'CAA' => 'Q', 'CAG' => 'Q',                                                           # Glutamine
    'CGA' => 'R', 'CGC' => 'R', 'CGG' => 'R', 'CGT' => 'R', 'AGA' => 'R', 'AGG' => 'R',   # Arginine
    'TCA' => 'S', 'TCC' => 'S', 'TCG' => 'S', 'TCT' => 'S', 'AGC' => 'S', 'AGT' => 'S',   # Serine
    'ACA' => 'T', 'ACC' => 'T', 'ACG' => 'T', 'ACT' => 'T',                               # Threonine
    'GTA' => 'V', 'GTC' => 'V', 'GTG' => 'V', 'GTT' => 'V',                               # Valine
    'TGG' => 'W',                                                                         # Tryptophan
    'TAC' => 'Y', 'TAT' => 'Y',                                                           # Tyrosine
    'TAA' => '*', 'TAG' => '*', 'TGA' => '*'                                              # Stop
);

my %regionType;
my $step = 100000;
($inGenomeGTF =~ /\.gz$/)?(open (GTF, "gzip -cd $inGenomeGTF | ") || die $!):(open (GTF, "$inGenomeGTF") || die $!);
while (<GTF>) {
    chomp;
    next if ($_ =~ /^\#/);
    my @inf = split /\t/, $_;
    my ($chr, $region, $start, $end, $strand) = @inf[0,2,3,4,6];
    my $interval = join("-", int($start/$step)*$step+1, (int($end/$step)+1)*$step);
    $regionType{$chr}{$interval}{$region} = 1;
	#print join("\t", $chr, $interval, $start, $end, $region)."\n";
}
close GTF;

my %chrSEQ;
($inGenomeFA =~ /\.gz$/)?(open (GFA, "gzip -cd $inGenomeFA | ") || die $!):(open (GFA, "$inGenomeFA") || die $!);
$/ = ">"; <GFA>;
while (<GFA>) {
    chomp;
    my @inf = split /\n/, $_;
    my $chr = (split /\s+/, $inf[0])[0];
    my $seq = join("", @inf[1..$#inf]);
    $chrSEQ{$chr} = $seq;
}
close GFA;
$/ = "\n";

open (OUT, " | gzip > $outdir/$prefix.SnvIndel.mutant.peptides.raw.gz") || die $!;
print OUT join("\t", qw(Chr  Start  End  Ref  Alt  Region  Gene  GeneDetail  mutType  mutPEPlen  mutDetail  mutStrand  wildAA  mutAA  wildNT  mutNT))."\n";

($inAnno =~ /\.gz$/)?(open (ANNO, "gzip -cd $inAnno | ") || die $!):(open (ANNO, "$inAnno") || die $!);

my %head = ();
@tmp = split /\t/, <ANNO>; chomp $tmp[-1];
for (my $i=0; $i<@tmp; $i++) {
    $head{$tmp[$i]} = $i;
}

my $mutSiteCounts = 0;
my (%regionMutSiteStat, %regionPepStat, %typePepStat, %uniquePepStat);
while (<ANNO>) {
    chomp;
    my @inf = split /\t/, $_;
    my ($chr, $start, $end, $ref, $alt) = @inf[$head{"Chr"}, $head{"Start"}, $head{"End"}, $head{"Ref"}, $head{"Alt"}];
    my ($region, $gene, $geneDetail) = @inf[$head{"Func.refGene"}, $head{"Gene.refGene"}, $head{"GeneDetail.refGene"}];
    next if ($mutRegionTag !~ /all/i && !exists $regionTag{$region}); ### skip to the next record if the region aren't specified
    my @outLine = ($chr, $start, $end, $ref, $alt, $region, $gene, $geneDetail);
    $regionMutSiteStat{$region} ++;
    $mutSiteCounts ++;
    
    my $mutFunc = "";
    if ($ref eq '-') {   ############################******************* INSERTION *******************############################
        if (length($alt)%3 == 0) {
            $mutFunc = "nonframeshift.insertion";
        }else {
            $mutFunc = "frameshift.insertion";
        }
        
        for (my $i=$minPEPlen; $i<=$maxPEPlen; $i++) {
            my $ntLen = $i*3;
            #my $unMutLen = $ntLen-length($alt);
            my $unMutLen = $ntLen-1;
            my $mutSiteShift = $unMutLen + 1;
            
            my $beforeINSnt = substr($chrSEQ{$chr}, $start-$unMutLen, $unMutLen);
            my $afterINSnt = substr($chrSEQ{$chr}, $start, $unMutLen);
            my $changedNT = join("", $beforeINSnt, $alt, $afterINSnt);
            
            for (my $j=1; $j<=length($changedNT)-$ntLen; $j++) {
                my $mutNTstart = $mutSiteShift - $j + 1;
                my $mutNTend = $mutNTstart + length($alt) - 1;
                my $mutNT = substr($changedNT, $j-1, $ntLen);
                my $mutAA = DNA2AA($mutNT);
                if ($mutAA !~ /\*/) {
                    my $mutText = join(".", "c", "$mutNTstart\_$mutNTend", "ins$alt");
                    print OUT join("\t", @outLine, $mutFunc, length($mutAA), $mutText, "+", ".", $mutAA, ".", $mutNT)."\n";
                    $regionPepStat{$region}{$mutAA} = 1;
                    $typePepStat{$mutFunc}{$mutAA} = 1;
                    $uniquePepStat{$mutAA} = 1;
                }
                
                my $mutNTrev = reverse($mutNT);
                $mutNTrev =~ tr/ATCG/TAGC/;
                my $mutAArev = DNA2AA($mutNTrev);
                if ($mutAArev !~ /\*/) {
                    my $altRev = reverse($alt);
                    $altRev =~ tr/ATCG/TAGC/;
                    $mutNTstart = $ntLen - $mutSiteShift + 1;
                    $mutNTend = $ntLen - $mutNTend + 1;
                    my $mutText = join(".", "c", "$mutNTstart\_$mutNTend", "ins$altRev");
                    print OUT join("\t", @outLine, $mutFunc, length($mutAArev), $mutText, "-", ".", $mutAArev, ".", $mutNTrev)."\n";
                    $regionPepStat{$region}{$mutAArev} = 1;
                    $typePepStat{$mutFunc}{$mutAArev} = 1;
                    $uniquePepStat{$mutAArev} = 1;
                }
            }
        }
    }elsif ($alt eq '-') {   ############################******************* DELETION *******************############################
        if (length($ref)%3 == 0) {
            $mutFunc = "nonframeshift.deletion";
        }else {
            $mutFunc = "frameshift.deletion";
        }
        
        for (my $i=$minPEPlen; $i<=$maxPEPlen; $i++) {
            my $ntLen = $i*3;
            my $beforeDELnt = substr($chrSEQ{$chr}, $start-$ntLen, $ntLen-1);
            my $afterDELnt = substr($chrSEQ{$chr}, $start+length($ref)-1, $ntLen-1);
            my $changedNT = join("", $beforeDELnt, $afterDELnt);
            
            for (my $j=1; $j<=length($changedNT)-$ntLen; $j++) {
                my $mutNTstart = $ntLen - $j + 1;
                my $mutNT = substr($changedNT, $j-1, $ntLen);
                my $mutAA = DNA2AA($mutNT);
                if ($mutAA !~ /\*/) {
                    my $mutText = join(".", "c", $mutNTstart, "del$ref");
                    print OUT join("\t", @outLine, $mutFunc, length($mutAA), $mutText, "+", ".", $mutAA, ".", $mutNT)."\n";
                    $regionPepStat{$region}{$mutAA} = 1;
                    $typePepStat{$mutFunc}{$mutAA} = 1;
                    $uniquePepStat{$mutAA} = 1;
                }
                
                my $mutNTrev = reverse($mutNT);
                $mutNTrev =~ tr/ATCG/TAGC/;
                my $mutAArev = DNA2AA($mutNTrev);
                if ($mutAArev !~ /\*/) {
                    my $refRev = reverse($ref);
                    $refRev =~ tr/ATCG/TAGC/;
                    $mutNTstart = $ntLen- $mutNTstart + 1;
                    my $mutText = join(".", "c", $mutNTstart, "del$refRev");
                    print OUT join("\t", @outLine, $mutFunc, length($mutAArev), $mutText, "-", ".", $mutAArev, ".", $mutNTrev)."\n";
                    $regionPepStat{$region}{$mutAArev} = 1;
                    $typePepStat{$mutFunc}{$mutAArev} = 1;
                    $uniquePepStat{$mutAArev} = 1;
                }
            }
        }
    }else {   ############################******************* SNV *******************############################
        for (my $i=$minPEPlen; $i<=$maxPEPlen; $i++) {
            my $ntLen = $i*3;
            my $beforeSNVnt = substr($chrSEQ{$chr}, $start-$ntLen, $ntLen-1);
            my $afterSNVnt = substr($chrSEQ{$chr}, $start, $ntLen-1);
            my $rawRefNT = join("", $beforeSNVnt, $ref, $afterSNVnt);
            my $changedNT = join("", $beforeSNVnt, $alt, $afterSNVnt);
           
            for (my $j=1; $j<=length($changedNT)-$ntLen; $j++) {
                my $mutAApos;
                my $mutNTpos = $ntLen - $j + 1;
                my $mutNT = substr($changedNT, $j-1, $ntLen);
                my $mutAA = DNA2AA($mutNT);
                my $wildNT = substr($rawRefNT, $j-1, $ntLen);
                my $wildAA = DNA2AA($wildNT);
                if (($mutAA !~ /\*/) && ($mutAA ne $wildAA)) {
                    if ($mutNTpos%3 == 0) {
                        $mutAApos = $mutNTpos/3;
                    }else {
                        $mutAApos = int($mutNTpos/3)+1;
                    }
                    my $refAA = substr($wildAA, $mutAApos-1, 1);
                    my $altAA = substr($mutAA, $mutAApos-1, 1);
                    if (!($refAA eq 'L' && $altAA eq 'I') && !($refAA eq 'I' && $altAA eq 'L')) {
                        my $mutText = join(":", "c.$ref$mutNTpos$alt", "p.$refAA$mutAApos$altAA");
                        print OUT join("\t", @outLine, "nonsynonymous.SNV", length($mutAA), $mutText, "+", $wildAA, $mutAA, $wildNT, $mutNT)."\n";
                        $regionPepStat{$region}{$mutAA} = 1;
                        $typePepStat{"nonsynonymous.SNV"}{$mutAA} = 1;
                        $uniquePepStat{$mutAA} = 1;
                    }
                }
                
                my $mutNTrev = reverse($mutNT);
                my $wildNTrev = reverse($wildNT);
                $mutNTrev =~ tr/ATCG/TAGC/;
                $wildNTrev =~ tr/ATCG/TAGC/;
                my $mutAArev = DNA2AA($mutNTrev);
                my $wildAArev = DNA2AA($wildNTrev);
                if (($mutAArev !~ /\*/) && ($mutAArev ne $wildAArev)) {
                    $mutNTpos = $ntLen - $mutNTpos + 1;
                    if ($mutNTpos%3 == 0) {
                        $mutAApos = $mutNTpos/3;
                    }else {
                        $mutAApos = int($mutNTpos/3)+1;
                    }
                    
                    my $refNTrev = reverse($ref);
                    my $altNTrev = reverse($alt);
                    $refNTrev =~ tr/ATCG/TAGC/;
                    $altNTrev =~ tr/ATCG/TAGC/;
                    my $refAArev = substr($wildAArev, $mutAApos-1, 1);
                    my $altAArev = substr($mutAArev, $mutAApos-1, 1);
                    if (!($refAArev eq 'L' && $altAArev eq 'I') && !($refAArev eq 'I' && $altAArev eq 'L')) {
                        my $mutText = join(":", "c.$refNTrev$mutNTpos$altNTrev", "p.$refAArev$mutAApos$altAArev");
                        print OUT join("\t", @outLine, "nonsynonymous.SNV", length($mutAArev), $mutText, "-", $wildAArev, $mutAArev, $wildNTrev, $mutNTrev)."\n";
                        $regionPepStat{$region}{$mutAArev} = 1;
                        $typePepStat{"nonsynonymous.SNV"}{$mutAArev} = 1;
                        $uniquePepStat{$mutAArev} = 1;
                    }
                }
            }
        }
    }
}
close ANNO;

open (STAT, "> $outdir/$prefix.SnvIndel.mutPepCount.stat.tsv") || die $!;
my $totalUniqPep = scalar(keys %uniquePepStat);
my $ratio = sprintf("%.2f", $totalUniqPep/$mutSiteCounts);
print STAT "#Number of total mutant sites from $prefix: $mutSiteCounts\n";
print STAT "#Number of total unique peptides from $prefix: $totalUniqPep\n";
print STAT "#Number of peptides generated per mutant site: $ratio\n\n";

print STAT "#Summary of peptide number by gene region\n";
foreach my $key (sort{$a cmp $b} keys %regionPepStat) {
    my $regionUniq = scalar(keys %{$regionPepStat{$key}});
    my $rate = sprintf("%.4f", $regionUniq/$totalUniqPep*100);
    print STAT join("\t", $key, $regionUniq, $rate)."\n";
}
print STAT "\n#Summary of peptide number by mutant type\n";
foreach my $key (sort{$a cmp $b} keys %typePepStat) {
    my $typeUniq = scalar(keys %{$typePepStat{$key}});
    my $rate = sprintf("%.4f", $typeUniq/$totalUniqPep*100);
    print STAT join("\t", $key, $typeUniq, $rate)."\n";
}
close STAT;

sub DNA2AA {
    my $seq = shift;
    my $AA;
    for (my $i=0; $i<length($seq); $i+=3) {
        my $sub = substr($seq, $i, 3);
        if (exists $CODE{$sub}) {
            $AA .= $CODE{$sub};
        }else {
            $AA .= "x";
        }
    }
    return $AA;
}
